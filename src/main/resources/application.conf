akka {
    loglevel = INFO
    actor {
        allow-java-serialization = on
    }
}
akka.actor.allow-java-serialization = on
mySpecialConfig {
    akka {
        loglevel = DEBUG
    }
}

# timed assertions test config
specialTimedAssertionsConfig {
    akka.test.single-expect-default = 0.5s
}

# intercepting log messages test
interceptingLogMessages {
  akka {
    loggers = ["akka.testkit.TestEventListener"]
    test {
      filter-leeway = 5s
    }
  }
}

# routers demo. poolMaster2 is the name of the master that I am instantiate
routersDemo {
  akka {
    actor.deployment {
      /poolMaster2 {
        router = round-robin-pool
        nr-of-instances = 5
      }

      /groupMaster2 {
        router = round-robin-group
        routees {
          paths = ["/user/slave_1","/user/slave_2","/user/slave_3","/user/slave_4","/user/slave_5"]
        }
      }
    }
  }
}

# dispatchers demo
my-dispatcher {
  type = Dispatcher # PinnedDispatcher, CallingThreadDispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 1
  }
  throughput = 30
}

dispatchersDemo {
  akka.actor.deployment {
    /my_actor_path_1 {
      dispatcher = my-dispatcher
    }
    /my_actor_path_2 {
      dispatcher = my-dispatcher
    }
  }
}

# mailbox demo
mailboxesDemo {
    support-ticket-dispatcher {
        mailbox-type = "org.github.felipegutierrez.explore.akka.classic.infra.Mailboxes$SupportTicketPriorityMailbox"
    }
    control-mailbox {
        mailbox-type = "akka.dispatch.UnboundedControlAwareMailbox"
    }
    akka.actor.deployment {
        /altControlAwareActor {
            mailbox = control-mailbox
        }
    }
}

akka.grpc.client {
  "org.github.felipegutierrez.explore.akka.classic.greeting.GreeterService" {
    host = 127.0.0.1
    port = 8080
    override-authority = foo.test.google.fr
    trusted = /certs/ca.pem
  }
}

# akka persistence
akka.persistence.journal.plugin = "akka.persistence.journal.leveldb"
akka.persistence.journal.leveldb.dir = "target/rtjvm/journal"

akka.persistence.snapshot-store.plugin = "akka.persistence.snapshot-store.local"
akka.persistence.snapshot-store.local.dir = "target/rtjvm/snapshots"

localStores {
    akka.persistence.journal.plugin = "akka.persistence.journal.leveldb"
    akka.persistence.journal.leveldb.dir = "target/localStores/journal"
    akka.persistence.journal.leveldb.compaction-intervals {
        simple-persistent-actor = 100
        "*" = 300
    }

    akka.persistence.snapshot-store.plugin = "akka.persistence.snapshot-store.local"
    akka.persistence.snapshot-store.local.dir = "target/localStores/snapshots"
}

postgresStore {
  akka.persistence.journal.plugin = "jdbc-journal"
  akka.persistence.snapshot-store.plugin = "jdbc-snapshot-store"
  akka.actor.allow-java-serialization = on
  # create JDBC configuration to Akka persistence
  akka-persistence-jdbc {
    shared-databases {
      slick {
        profile = "slick.jdbc.PostgresProfile$"
        db {
          numThreads = 10
          driver = "org.postgresql.Driver"
          url = "jdbc:postgresql://localhost:5432/rtjvm"
          user = "docker"
          password = "docker"
        }
      }
    }
  }
  # dbinding the JDBC plugins with the configureation created above
  jdbc-journal {
    use-shared-db = "slick"
  }
  jdbc-snapshot-store {
    use-shared-db = "slick"
  }
}

cassandraStore {
  akka.persistence.journal.plugin = "cassandra-journal"
  akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"
}

cassandraSerializableStore {
  akka.persistence.journal.plugin = "cassandra-journal"
  akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"
  akka.actor {
    serializers {
      java = "akka.serialization.JavaSerializer"
      user-serializer = "org.github.felipegutierrez.explore.akka.classic.persistence.stores.UserRegistrationSerializer"
    }
    serialization-bindings {
      "org.github.felipegutierrez.explore.akka.classic.persistence.stores.UserRegistered" = user-serializer
    }
  }
}

eventAdapters {
  akka.persistence.journal.plugin = "cassandra-journal"
  akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"
  akka.actor {
    allow-java-serialization = on
    serializers {
      java = "akka.serialization.JavaSerializer"
    }
  }
  cassandra-journal {
    event-adapters {
      guitar-inventory-version2 = "org.github.felipegutierrez.explore.akka.classic.persistence.schema.GuitarEventAdapter"
    }
    event-adapter-bindings {
      "org.github.felipegutierrez.explore.akka.classic.persistence.schema.GuitarAdded" = guitar-inventory-version2
    }
  }
}

detachingModels {
  akka.persistence.journal.plugin = "cassandra-journal"
  akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"
  akka.actor {
    allow-java-serialization = on
    serializers {
      java = "akka.serialization.JavaSerializer"
    }
  }
  cassandra-journal {
    event-adapters {
      detached-adapter = "org.github.felipegutierrez.explore.akka.classic.persistence.detaching.ModelAdapter"
    }
    event-adapter-bindings {
      "org.github.felipegutierrez.explore.akka.classic.persistence.detaching.DomainModel$CouponApplied" = detached-adapter
      "org.github.felipegutierrez.explore.akka.classic.persistence.detaching.DataModel$WrittenCouponApplied" = detached-adapter
      "org.github.felipegutierrez.explore.akka.classic.persistence.detaching.DataModel$WrittenCouponAppliedVersion2" = detached-adapter
    }
  }
}

persistenceCassandraQuery {
  akka.persistence.journal.plugin = "cassandra-journal"
  akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"
  akka.actor {
    allow-java-serialization = on
    serializers {
      java = "akka.serialization.JavaSerializer"
    }
  }
  cassandra-journal {
    event-adapters {
      tagging = "org.github.felipegutierrez.explore.akka.classic.persistence.query.PersistenceCassandraQuery$MusicStoreEventAdapter"
    }

    event-adapter-bindings {
      "org.github.felipegutierrez.explore.akka.classic.persistence.query.PersistenceCassandraQuery$PlaylistPurchased" = tagging
    }
  }
}

votingPersistentExercise {
  akka {
    loglevel = INFO
      actor {
        allow-java-serialization = on
      }
  }
  akka.persistence.journal.plugin = "akka.persistence.journal.leveldb"
  akka.persistence.journal.leveldb.dir = "target/rtjvm/journalvoting"
}

# akka-streams
dedicated-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 5
  }
}

# Metrics: Kamon + Prometheus
#kamon.prometheus.start-embedded-http-server = no
kamon.instrumentation.akka.filters {
  actors.track {
    includes = [ "AkkaQuickStart/user/*", "FirstStreamMonitoring/user/*" ]
    # excludes = [ "AkkaQuickStart/system/**" ]
  }
}

# akka-remote with serialization
customSerializablePerson {
  akka {
    actor {
      provider = remote
      serializers {
        java = "akka.serialization.JavaSerializer"
        person-serializer = "org.github.felipegutierrez.explore.akka.classic.remote.serialization.PersonSerializer"
        person-json-serializer = "org.github.felipegutierrez.explore.akka.classic.remote.serialization.PersonJsonSerializer"
      }
      serialization-bindings {
        # "org.github.felipegutierrez.explore.akka.classic.remote.serialization.Person" = person-serializer
        "org.github.felipegutierrez.explore.akka.classic.remote.serialization.Person" = person-json-serializer
      }
    }
    remote {
      artery {
        enabled = on
        transport = aeron-udp
        canonical.hostname = "localhost"
      }
    }
  }
}

kryoSerializablePerson {
  akka {
    extensions = ["com.romix.akka.serialization.kryo.KryoSerializationExtension$"]
    actor {
      provider = remote
      allow-java-serialization = off
      serializers {
        java = "akka.serialization.JavaSerializer"
        kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
      }
      serialization-bindings {
        "java.io.Serializable" = kryo // switch the default serializer to kryo
      }
      kryo {
        type = "graph" // can serialize objects with shared or cyclic dependencies; alternative nograph, faster
        idstrategy = "incremental" // one of the fastest; alternative "explicit"
        post-serialization-transformations = "lz4,aes" // compression (LZ4) and encryption (AES)
        kryo-trace = true // for debugging
        use-manifests = true // attach the class name to the serialization
        implicit-registration-logging = true // see how the standard classes/types are being registered
        mappings { // optional for idstrategy "incremental", mandatory for "explicit"
          "org.github.felipegutierrez.explore.akka.classic.remote.serialization.Person" = 45
        }
        classes = [
          "org.github.felipegutierrez.explore.akka.classic.remote.serialization.Person"
        ]
      }
    }
    remote {
      artery {
        enabled = on
        transport = aeron-udp
        canonical.hostname = "localhost"
      }
    }
  }
}

avroSerializablePerson {
  akka {
    actor {
      provider = remote
      #allow-java-serialization = off
      serializers {
        java = "akka.serialization.JavaSerializer"
        avro = "org.github.felipegutierrez.explore.akka.classic.remote.serialization.MyFirstAvroSerializer"
      }
      serialization-bindings {
        "org.github.felipegutierrez.explore.akka.classic.remote.serialization.CompanyRegistry" = avro
        "java.io.Serializable" = java
      }
    }
    remote {
      artery {
        enabled = on
        transport = aeron-udp
        canonical.hostname = "localhost"
      }
    }
  }
}
